{
  "openapi": "3.0.4",
  "x-mint": {
    "mcp": {
      "enabled": true
    }
  },
  "info": {
    "title": "Nexrender API",
    "version": "2.0",
    "description": "REST API for the Nexrender cloud rendering platform, enabling programmatic control over After Effects template processing, job management, and asset handling.\n\nFeatures include:\n\n- Template upload and management (AEP, MOGRT, ZIP files)\n- Job creation and status monitoring with real-time progress\n- Font library management for typography consistency\n- Webhook notifications for job lifecycle events\n- Asset injection for dynamic content replacement\n\nAuthentication is required for all endpoints using Bearer token authorization.\n"
  },
  "servers": [
    {
      "url": "https://api.nexrender.com/api/v2",
      "description": "Production API server"
    }
  ],
  "components": {
    "securitySchemes": {
      "apiToken": {
        "type": "http",
        "scheme": "bearer",
        "description": "Bearer token authentication using API tokens for team-based access control.\n\nYou can generate your own API token at: https://app.nexrender.com/team/settings\n"
      }
    },
    "schemas": {
      "Font": {
        "type": "object",
        "description": "Font file metadata for team-shared typography resources used in After Effects rendering",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique font identifier"
          },
          "familyName": {
            "type": "string",
            "description": "Font family name (e.g., \"Arial\", \"Helvetica Neue\") extracted from font metadata (or custom)"
          },
          "fileName": {
            "type": "string",
            "description": "Original font file name as uploaded (supports TTF only). This is the file name referenced in pushed jobs."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp when the font was uploaded and processed"
          }
        }
      },
      "JobAsset": {
        "type": "object",
        "description": "Asset to be used in job rendering, containing source information and target layer details",
        "properties": {
          "src": {
            "type": "string",
            "description": "Source URL, script data or file path for the asset (supports HTTP/HTTPS URLs or local paths)"
          },
          "type": {
            "type": "string",
            "description": "Asset type (e.g., image, video, audio, text, data, script)"
          },
          "layerName": {
            "type": "string",
            "description": "Target layer name in the After Effects composition where this asset will be applied"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name for the asset"
          }
        },
        "required": [
          "type"
        ],
        "additionalProperties": true
      },
      "JobWebhook": {
        "type": "object",
        "description": "Webhook configuration for job status notifications and callbacks",
        "properties": {
          "url": {
            "type": "string",
            "description": "Target webhook URL that will receive job status updates"
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "DELETE"
            ],
            "description": "HTTP method to use when calling the webhook endpoint",
            "default": "POST"
          },
          "headers": {
            "type": "object",
            "description": "Additional HTTP headers to include in webhook requests",
            "additionalProperties": true
          },
          "data": {
            "type": "object",
            "description": "Custom data payload to include with webhook notifications",
            "additionalProperties": true
          },
          "custom": {
            "type": "boolean",
            "default": false,
            "description": "Flag indicating if webhook should only include custom data provided by the user"
          }
        },
        "required": [
          "url"
        ]
      },
      "JobTemplate": {
        "type": "object",
        "description": "Template configuration defining the After Effects project and composition to render",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[A-Z0-9]{26}$",
            "description": "Unique template identifier in ULID format (26 characters, uppercase alphanumeric)"
          },
          "src": {
            "type": "string",
            "description": "Source URL to the After Effects template (.aep, .mogrt, or .zip file)"
          },
          "composition": {
            "type": "string",
            "description": "Name of the specific composition within the template to render (optional for .mogrt)",
            "nullable": true
          }
        },
        "required": [
          "id"
        ],
        "additionalProperties": true
      },
      "JobCreation": {
        "type": "object",
        "description": "Configuration object for creating a new render job with template, assets, and options",
        "properties": {
          "template": {
            "$ref": "#/components/schemas/JobTemplate"
          },
          "preview": {
            "type": "boolean",
            "default": false,
            "description": "Generate a low-quality preview render instead of full quality output"
          },
          "fonts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "List of font file names to include in the render environment"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobAsset"
            },
            "default": [],
            "description": "Collection of media assets (images, videos, audio, scripts, text, ...) to use in the render"
          },
          "settings": {
            "type": "object",
            "description": "Render configuration settings for output format, quality, and frame selection",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["video", "image"],
                "description": "Output render type - 'video' for MP4/MOV files, 'image' for PNG/JPG files"
              },
              "frames": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Single frame number to render as image"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "minItems": 2,
                    "maxItems": 2,
                    "description": "Frame range [start, end] where end > start"
                  }
                ],
                "description": "Frame specification - single frame number or [start, end] range. Required for image type."
              },
              "quality": {
                "type": "string",
                "enum": ["draft", "full"],
                "description": "Render quality setting - 'draft' for faster low-quality preview, 'full' for high-quality output"
              },
              "codec": {
                "type": "string",
                "description": "Output codec specification (e.g., 'h264_vbr_15mbps', 'prores_422', 'png', 'jpeg')"
              }
            },
            "additionalProperties": false
          },
          "upload": {
            "type": "object",
            "description": "Custom upload configuration for output files to external storage providers",
            "properties": {
              "prefix": {
                "type": "string",
                "description": "Folder prefix/path where output files will be stored (e.g., 'my-project/outputs/')"
              },
              "outputUrl": {
                "type": "string",
                "description": "Custom base URL for accessing uploaded files publicly"
              },
              "provider": {
                "type": "string",
                "enum": ["s3"],
                "default": "s3",
                "description": "Storage provider - 's3' for Amazon S3 compatible"
              },
              "params": {
                "type": "object",
                "description": "Provider-specific upload parameters and credentials",
                "properties": {
                  "endpoint": {
                    "type": "string",
                    "default": "https://s3.amazonaws.com",
                    "description": "Custom S3-compatible endpoint URL"
                  },
                  "region": {
                    "type": "string",
                    "description": "AWS region or storage region identifier (required)"
                  },
                  "bucket": {
                    "type": "string",
                    "description": "Target bucket name for file uploads (required)"
                  },
                  "acl": {
                    "type": "string",
                    "description": "Access control list setting for uploaded files (e.g., 'public-read', 'private')"
                  },
                  "accessKeyId": {
                    "type": "string",
                    "description": "AWS access key ID or equivalent credential (required)"
                  },
                  "accessKeySecret": {
                    "type": "string",
                    "description": "AWS secret access key or equivalent credential (required)"
                  }
                },
                "required": ["region", "bucket", "accessKeyId", "accessKeySecret"],
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          "webhook": {
            "$ref": "#/components/schemas/JobWebhook"
          }
        },
        "required": [
          "template"
        ],
        "additionalProperties": true
      },
      "Job": {
        "type": "object",
        "description": "Render job with current status, progress, and detailed statistics",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique job identifier used for tracking and API operations"
          },
          "templateId": {
            "type": "string",
            "description": "Reference to the template used for this job (null if template was not used)",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Current job status (queued, render:dorender, finished, error, etc.)"
          },
          "progress": {
            "type": "number",
            "format": "float",
            "description": "Render progress as a percentage (0.0 to 100.0)"
          },
          "stats": {
            "type": "object",
            "description": "Detailed timing and metadata statistics for the job",
            "properties": {
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "ISO timestamp when the job was initially created"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "ISO timestamp of the most recent job status update"
              },
              "startedAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "ISO timestamp when job processing began (null if not started)"
              },
              "finishedAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "ISO timestamp when job completed successfully (null if not finished)"
              },
              "errorAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "ISO timestamp when job encountered an error (null if no error)"
              },
              "totalAssets": {
                "type": "integer",
                "description": "Total number of assets included in this job"
              },
              "renderDuration": {
                "type": "number",
                "format": "float",
                "nullable": true,
                "description": "Total render time in seconds (null if not completed)"
              },
              "error": {
                "type": "string",
                "nullable": true,
                "description": "Error message if job failed (null if successful)"
              }
            }
          },
          "outputUrl": {
            "type": "string",
            "nullable": true,
            "description": "URL to the rendered content"
          }
        }
      },
      "TemplateCreation": {
        "type": "object",
        "description": "Configuration for creating a new template with project file type and display information",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "aep",
              "zip",
              "mogrt"
            ],
            "description": "Template project file type - aep (After Effects Project), zip (compressed project), or mogrt (Motion Graphics Template)"
          },
          "displayName": {
            "type": "string",
            "description": "Human-readable name for the template shown in UI and listings"
          }
        },
        "required": [
          "type",
          "displayName"
        ]
      },
      "TemplateUpdate": {
        "type": "object",
        "description": "Fields that can be updated for an existing template",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Updated human-readable name for the template"
          }
        }
      },
      "TemplateUploadInfo": {
        "type": "object",
        "description": "Presigned upload URL and metadata for securely uploading template files to cloud storage",
        "properties": {
          "url": {
            "type": "string",
            "description": "Presigned upload URL with temporary access credentials"
          },
          "method": {
            "type": "string",
            "enum": [
              "PUT",
              "POST"
            ],
            "description": "HTTP method required for the upload operation"
          },
          "fields": {
            "type": "object",
            "description": "Additional form fields or headers required for successful upload",
            "additionalProperties": {
              "type": "string"
            }
          },
          "expiresIn": {
            "type": "integer",
            "description": "Time in seconds until the upload URL expires and becomes invalid"
          },
          "key": {
            "type": "string",
            "description": "Unique storage key/path where the uploaded file will be stored"
          }
        },
        "required": [
          "url",
          "method",
          "expiresIn",
          "key"
        ]
      },
      "Template": {
        "type": "object",
        "description": "Complete template object with metadata, processing status, and content information",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique template identifier used for referencing in jobs and API operations"
          },
          "type": {
            "type": "string",
            "description": "Template file format (aep, zip, or mogrt)"
          },
          "displayName": {
            "type": "string",
            "description": "Human-readable name displayed in UI and template listings"
          },
          "status": {
            "type": "string",
            "description": "Current processing status (awaiting_upload, processing, uploaded, error)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp when the template was initially created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp of the most recent template modification"
          },
          "compositions": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Individual composition name available for rendering"
            },
            "description": "List of compositions found within the template that can be rendered"
          },
          "layers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Individual layer name within the template"
            },
            "description": "List of layers available for asset replacement and manipulation"
          },
          "mogrt": {
            "type": "object",
            "description": "Motion Graphics Template specific metadata and properties",
            "additionalProperties": true
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "Error message if template processing or validation failed (null if successful)"
          },
          "uploadInfo": {
            "$ref": "#/components/schemas/TemplateUploadInfo"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Standard error response format",
        "properties": {
          "error": {
            "type": "string",
            "description": "Human-readable error message explaining what went wrong"
          }
        },
        "required": [
          "error"
        ]
      },
      "ValidationErrorResponse": {
        "type": "object",
        "description": "Validation error response with detailed field information",
        "properties": {
          "error": {
            "type": "string",
            "description": "Main error message"
          },
          "details": {
            "type": "array",
            "description": "Array of specific validation errors for individual fields",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "description": "Field name that failed validation"
                },
                "message": {
                  "type": "string",
                  "description": "Specific validation error for this field"
                }
              }
            }
          }
        }
      },
      "Secret": {
        "type": "object",
        "description": "Secret object for storing secure environment variables and configuration",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique secret identifier"
          },
          "name": {
            "type": "string",
            "description": "Secret name/key used for reference in jobs"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp when the secret was created"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt"
        ]
      },
      "SecretCreation": {
        "type": "object",
        "description": "Configuration for creating a secret",
        "properties": {
          "name": {
            "type": "string",
            "description": "Secret name/key for identification and reference"
          },
          "value": {
            "type": "string",
            "description": "Secret value to store securely (will be encrypted)"
          }
        },
        "required": [
          "name",
          "value"
        ]
      }
    }
  },
  "security": [
    {
      "apiToken": []
    }
  ],
  "paths": {
    "/templates": {
      "post": {
        "summary": "Create new template",
        "description": "Create a new template with specified type and display name",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "create-or-update-template",
            "description": "Register a new After Effects project (.aep, .mogrt, .zip). Returns upload info for file transfer."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateCreation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template successfully created with upload information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request - missing required fields or invalid template type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Template Management"
        ],
        "operationId": "createOrUpdateTemplate"
      },
      "get": {
        "summary": "List all templates",
        "description": "Retrieve all templates available to the authenticated team with their metadata and processing status",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "list-templates",
            "description": "Retrieve all templates available to your team, including metadata, processing status, and discovered compositions."
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved list of templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Template"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Template Management"
        ],
        "operationId": "listTemplates"
      }
    },
    "/templates/{id}": {
      "get": {
        "summary": "Get template details",
        "description": "Retrieve complete information about a specific template including compositions, layers, and processing status",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "get-template",
            "description": "Fetch full details of a template, including compositions, layers, and processing state."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Unique template identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved template details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found - the specified template ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Template Management"
        ],
        "operationId": "getTemplate"
      },
      "delete": {
        "summary": "Delete template",
        "description": "Permanently remove a template and all associated data (cannot be undone, affects existing jobs)",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "delete-template",
            "description": "Permanently remove a template and its data. Jobs referencing this template will be affected."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Unique template identifier to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Template successfully deleted"
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found - the specified template ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - template is currently in use by active jobs and cannot be deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Template Management"
        ],
        "operationId": "deleteTemplate"
      },
      "patch": {
        "summary": "Update template",
        "description": "Update modifiable properties of an existing template",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "update-template",
            "description": "Update properties of an existing template, such as its display name."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Unique template identifier to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TemplateUpdate"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request - malformed update data or invalid display name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found - the specified template ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Template Management"
        ],
        "operationId": "updateTemplate"
      }
    },
    "/templates/{id}/upload": {
      "get": {
        "summary": "Get download URL for template file",
        "description": "Generate a presigned download URL for accessing the template file securely",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "get-template-download-url",
            "description": "Generate a presigned URL to securely download the raw template file from cloud storage."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Unique template identifier to get download URL for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully generated download URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "Presigned download URL with temporary access (expires after set time)"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found - the specified template ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "410": {
            "description": "Template file no longer available - file may have been deleted or expired",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Template Management"
        ],
        "operationId": "getTemplateDownloadUrl"
      },
      "put": {
        "summary": "Get fresh upload URL for template file",
        "description": "Generate a new presigned upload URL for uploading or replacing the template file (previous URLs expire)",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "get-template-upload-url",
            "description": "Generate a fresh presigned upload URL for uploading or replacing the template file."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Unique template identifier to get upload URL for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully generated fresh upload URL with credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateUploadInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found - the specified template ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Template Management"
        ],
        "operationId": "getTemplateUploadUrl"
      }
    },
    "/jobs": {
      "post": {
        "summary": "Create new job",
        "description": "Submit a new render job with template, assets, and configuration options",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "create-job",
            "description": "Submit a new After Effects render job with chosen template, assets, fonts, and webhooks."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobCreation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job successfully created and queued for processing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request - missing required fields or invalid template configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Template not found - the specified template ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Render Management"
        ],
        "operationId": "createJob"
      },
      "get": {
        "summary": "List jobs",
        "description": "Retrieve a filtered and paginated list of render jobs with various query options for job management and monitoring",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "list-jobs",
            "description": "Retrieve a paginated list of render jobs. Supports filters for state, tags, creation date ranges, and sort order."
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "minimal",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            },
            "description": "Return minimal job data (excludes detailed stats and assets for performance)"
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Starting offset for pagination (0-indexed)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "description": "Maximum number of jobs to return in a single request"
          },
          {
            "in": "query",
            "name": "from_date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter jobs created after this date (ISO 8601 format)"
          },
          {
            "in": "query",
            "name": "to_date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter jobs created before this date (ISO 8601 format)"
          },
          {
            "in": "query",
            "name": "states",
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of job states to include (e.g., \"queued,processing,finished\")"
          },
          {
            "in": "query",
            "name": "exclude_states",
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of job states to exclude from results"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "random",
                "newest_first",
                "oldest_first",
                "priority"
              ],
              "default": "oldest_first"
            },
            "description": "Sort order for job results and pickup priority"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9-_]+(,[a-zA-Z0-9-_]+)*$"
            },
            "description": "Filter by comma-separated tags (alphanumeric, hyphens, underscores only)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of jobs matching the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters - malformed date filters or invalid pagination values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token"
          }
        },
        "tags": [
          "Render Management"
        ],
        "operationId": "listJobs"
      }
    },
    "/jobs/{id}": {
      "get": {
        "summary": "Get job details",
        "description": "Retrieve complete information about a specific job including status, progress, assets, and statistics",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "get-job",
            "description": "Get detailed job information, including current status, progress percentage, render timings, and output URL."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Unique job identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved job details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Job not found - the specified job ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Render Management"
        ],
        "operationId": "getJob"
      }
    },
    "/fonts": {
      "post": {
        "summary": "Upload new font",
        "description": "Upload a new font file to make it available for use in rendering jobs",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "upload-font",
            "description": "Upload a new font file (TTF only) to make it available for rendering jobs."
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "familyName": {
                    "type": "string",
                    "default": null,
                    "description": "Optional font family name override (auto-detected if not provided)"
                  },
                  "font": {
                    "type": "string",
                    "format": "binary",
                    "description": "Font file to upload (supports TTF only)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Font successfully uploaded and processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Font"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request - malformed font file or missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "413": {
            "description": "File too large - font file exceeds size limits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Font Management"
        ],
        "operationId": "uploadFont"
      },
      "get": {
        "summary": "List all fonts for team",
        "description": "Retrieve all fonts available to the authenticated team, including metadata and upload information",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "list-fonts",
            "description": "List all fonts uploaded to your team’s library with metadata such as family name and file info."
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved list of fonts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Font"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token"
          }
        },
        "tags": [
          "Font Management"
        ],
        "operationId": "listFonts"
      }
    },
    "/fonts/{id}": {
      "get": {
        "summary": "Get font metadata",
        "description": "Retrieve detailed information about a specific font including family name, file info, and upload timestamp",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "get-font",
            "description": "Retrieve metadata for a specific font, including its family name, file, and upload timestamp."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Unique font identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved font details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Font"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Font not found - the specified font ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Font Management"
        ],
        "operationId": "getFont"
      },
      "delete": {
        "summary": "Delete font",
        "description": "Permanently remove a font from the team's available fonts (cannot be undone)",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "delete-font",
            "description": "Permanently remove a font from your team’s library. Jobs using this font will no longer be able to reference it."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Unique font identifier to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Font successfully deleted"
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Font not found - the specified font ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - font is currently in use by active jobs and cannot be deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Font Management"
        ],
        "operationId": "deleteFont"
      }
    },
    "/secrets": {
      "get": {
        "summary": "List all secrets",
        "description": "Retrieve all secrets available to the authenticated team (values are not returned for security)",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "list-secrets",
            "description": "List all secrets available to your team. Secret values are not returned for security purposes."
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved list of secrets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Secret"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Secret Management"
        ],
        "operationId": "listSecrets"
      },
      "put": {
        "summary": "Create a new secret",
        "description": "Create a new secret. Secret values are encrypted and stored securely.",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "create-or-update-secret",
            "description": "Create a new secret. Secret values are encrypted and stored securely."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretCreation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Secret successfully created"
          },
          "400": {
            "description": "Invalid request - missing required fields or invalid secret data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - secret with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Secret Management"
        ],
        "operationId": "createOrUpdateSecret"
      }
    },
    "/secrets/{id}": {
      "delete": {
        "summary": "Delete secret",
        "description": "Permanently remove a secret from the team's available secrets (cannot be undone)",
        "x-mint": {
          "mcp": {
            "enabled": true,
            "name": "delete-secret",
            "description": "Permanently remove a secret from your team's available secrets. Jobs using this secret will no longer be able to reference it."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Unique secret identifier to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret successfully deleted"
          },
          "401": {
            "description": "Unauthorized - invalid or missing API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Secret not found - the specified secret ID does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Secret Management"
        ],
        "operationId": "deleteSecret"
      }
    }
  }
}
